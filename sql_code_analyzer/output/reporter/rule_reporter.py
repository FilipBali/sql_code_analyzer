from sql_code_analyzer.adapter.freature_class.base_cast import BaseCast
from sql_code_analyzer.output.reporter.base import Reporter, _Message
from sql_code_analyzer.output.reporter.program_reporter import ProgramReporter


class _RuleMessage(_Message):

    def __init__(self):
        ...

    def print(self):
        ...

class RuleReporter(Reporter):
    """
    Class which provides a way of reporting rule reports to user.
    """

    def __init__(self):
        self.messages = []


class RuleReport:
    """
    Class of rule report which encapsulates the report generated by the rule.
    """

    def __init__(self,
                 rule_id,
                 rule_name,
                 message,
                 node):
        """
        Generate rule report object
        :param rule_id: Rule ID defined by rule.
        :param rule_name: Rule name defined by rule.
        :param message: Rule message defined by rule.
        :param node: The specific node where the message is created.
        """

        self.rule_id = rule_id
        self.rule_name = rule_name
        self.message = message
        self.node = node

        self._validate_report_data()

    def _validate_report_data(self) -> None:
        """
        Verify if all necessary class properties are set.
        :return: None
        """

        # TODO implements report deletion if the requirements are not met.

        if not isinstance(self.rule_id, str):
            ProgramReporter.show_type_integrity_warning_message(
                message="Rule ID must be string!"
            )

        if not isinstance(self.rule_name, str):
            ProgramReporter.show_type_integrity_warning_message(
                message="Rule name must be string!"
            )

        if not isinstance(self.message, str):
            ProgramReporter.show_type_integrity_warning_message(
                message="Rule message must be string!"
            )

        if not issubclass(type(self.node), BaseCast):
            ProgramReporter.show_type_integrity_warning_message(
                message="The node must be node of abstract syntax tree."
            )
